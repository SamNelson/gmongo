{"name":"GMongo","body":"# Goal\r\n\r\nThe goal of this project is to provide a more simple, easy to use and less verbose API to work with mongodb using the Groovy programming language.\r\n\r\nMore information can be found here: http://blog.paulopoiati.com.\r\n\r\n# Maven\r\n\r\nAll versions of the project can be found in the maven central repository:\r\n\r\n    http://repo1.maven.org/maven2/com/gmongo/gmongo/\r\n\r\n# Usage\r\n\r\ncom.gmongo.GMongo doesn't extends com.mongodb.Mongo. It delegate all methods calls to a Mongo instance. If\r\nyou need to get the Mongo reference \u0010just call com.gmongo.GMongo#getMongo.\r\n\r\nSample:\r\n\r\n```groovy\r\n// To download GMongo on the fly and put it at classpath\r\n@Grab(group='com.gmongo', module='gmongo', version='0.9.5')\r\nimport com.gmongo.GMongo\r\n// Instantiate a com.gmongo.GMongo object instead of com.mongodb.Mongo\r\n// The same constructors and methods are available here\r\ndef mongo = new GMongo()\r\n\r\n// Get a db reference in the old fashion way\r\ndef db = mongo.getDB(\"gmongo\")\r\n\r\n// Collections can be accessed as a db property (like the javascript API)\r\nassert db.myCollection instanceof com.mongodb.DBCollection\r\n// They also can be accessed with array notation \r\nassert db['my.collection'] instanceof com.mongodb.DBCollection\r\n\r\n// Insert a document\r\ndb.languages.insert([name: 'Groovy'])\r\n// A less verbose way to do it\r\ndb.languages.insert(name: 'Ruby')\r\n// Yet another way\r\ndb.languages << [name: 'Python']\r\n\r\n// Insert a list of documents\r\ndb.languages << [[name: 'Javascript', type: 'prototyped'], [name: 'Ioke', type: 'prototyped']]\r\n\r\ndef statics = ['Java', 'C', 'VB']\r\n\r\nstatics.each {\r\n    db.languages << [name: it, type: 'static']\r\n}\r\n\r\n// Finding the first document\r\ndef lang = db.languages.findOne()\r\nassert lang.name == 'Groovy'\r\n// Set a new property\r\nlang.site = 'http://groovy.codehaus.org/'\r\n// Save the new version\r\ndb.languages.save lang\r\n\r\nassert db.languages.findOne(name: 'Groovy').site == 'http://groovy.codehaus.org/'\r\n\r\n// Counting the number of documents in the collection\r\nassert db.languages.find(type: 'static').count() == 3\r\n\r\n// Another way to count\r\nassert db.languages.count(type: 'prototyped') == 2\r\n\r\n// Updating a document using the '$set' operator\r\ndb.languages.update([name: 'Python'], [$set: [paradigms: ['object-oriented', 'functional', 'imperative']]])\r\n\r\nassert 3 == db.languages.findOne(name: 'Python').paradigms.size()\r\n\r\n// Using upsert\r\ndb.languages.update([name: 'Haskel'], [$set: [paradigms: ['functional']]], true)\r\n\r\nassert db.languages.findOne(name: 'Haskel')\r\n\r\n// Removing some documents\r\ndb.languages.remove(type: 'prototyped')\r\nassert 0 == db.languages.count(type: 'prototyped')\r\n\r\n// Removing all documents\r\ndb.languages.remove([:])\r\nassert 0 == db.languages.count()\r\n\r\n// To ensure complete consistency in a session use DB#inRequest\r\n// It is analogous to user DB#requestStarted and DB#requestDone\r\ndb.inRequest {\r\n    db.languages.insert(name: 'Objective-C')\r\n    assert 1 == db.languages.count(name: 'Objective-C')\r\n}\r\n```\r\n\r\n## Sorting and Pagination\r\n```groovy\r\n@Grab(group='com.gmongo', module='gmongo', version='0.9.5')\r\nimport com.gmongo.GMongo\r\n\r\ndef mongo = new GMongo()\r\ndef db = mongo.getDB(\"gmongo\")\r\n\r\n// Make sure that the collection is empty\r\ndb.example.drop()\r\n\r\n// Insert 100 documents with any random value\r\n100.times {\r\n    db.example << [time: it, random: (Integer)(Math.random() * 100)]\r\n}\r\n\r\ndef at = 0\r\n\r\n// Find out how many documents are in the collection\r\ndef total = db.example.find().count()\r\n\r\n// Sort the documents by the 'random' property ascending and Paginate over it 10 by 10\r\nwhile (at < total) {\r\n    println \"At page: ${at / 10}\\n\"\r\n    db.example.find().limit(10).skip(at).sort(random: 1).each {\r\n        println \"\\t-- ${it}\"\r\n    }\r\n    println \"\\n--------------------------\"\r\n    at += 10\r\n}\r\n```\r\n    \r\n## MapReduce\r\n```groovy\r\n@Grab(group='com.gmongo', module='gmongo', version='0.9.5')\r\nimport com.gmongo.GMongo\r\n\r\ndef mongo = new GMongo()\r\ndef db = mongo.getDB(\"gmongo\")\r\n\r\ndef words = ['foo', 'bar', 'baz']\r\ndef rand  = new Random()\t\t\r\n\r\n1000.times { \r\n    db.words << [word: words[rand.nextInt(3)]]\r\n}\r\n\r\nassert db.words.count() == 1000\r\n\r\ndef result = db.words.mapReduce(\r\n    \"\"\"\r\n    function map() {\r\n        emit(this.word, {count: 1})\r\n    }\r\n    \"\"\",\r\n    \"\"\"\r\n    function reduce(key, values) {\r\n        var count = 0\r\n        for (var i = 0; i < values.length; i++)\r\n            count += values[i].count\r\n        return {count: count}\r\n    }\r\n    \"\"\",\r\n    \"mrresult\",\r\n    [:] // No Query\r\n)\r\n\r\nassert db.mrresult.count() == 3\r\nassert db.mrresult.find()*.value*.count.sum() == 1000\r\n```\r\n## Grouping\r\n\r\nGrouping can also be achieved. Example:\r\n\r\n```groovy\r\n@Grab(\"com.gmongo:gmongo:0.9.5\")\r\nimport com.gmongo.GMongo\r\n\r\ndef gmongo = new GMongo(\"localhost:27017\")\r\n\r\ndef db = gmongo.getDB(\"test\")\r\n\r\ndb.clicks.drop()\r\n\r\ndb.clicks.insert(day: 1, total: 10)\r\ndb.clicks.insert(day: 1, total: 14)\r\ndb.clicks.insert(day: 2, total: 45)\r\ndb.clicks.insert(day: 1, total:  9)\r\ndb.clicks.insert(day: 3, total: 32)\r\ndb.clicks.insert(day: 2, total: 11)\r\ndb.clicks.insert(day: 3, total: 34)\r\n\r\ndef result = db.clicks.group([day: true], [:], [count: 0], \"function(doc, out) { out.count += doc.total }\")\r\n\r\n// Will output [[day:1.0, count:33.0], [day:2.0, count:56.0], [day:3.0, count:66.0]]\r\nprintln result\r\n```\r\n\r\nAnd a more advanced grouping using 'keyf':\r\n\r\n```groovy\r\n@Grab(\"com.gmongo:gmongo:0.9.5\")\r\nimport com.gmongo.GMongo\r\n\r\ndef gmongo = new GMongo(\"localhost:27017\")\r\n\r\ndef db = gmongo.getDB(\"test\")\r\n\r\ndb.clicks.drop()\r\n\r\ndb.clicks.insert(day: 1, total: 10)\r\ndb.clicks.insert(day: 1, total: 14)\r\ndb.clicks.insert(day: 2, total: 45)\r\ndb.clicks.insert(day: 1, total:  9)\r\ndb.clicks.insert(day: 3, total: 32)\r\ndb.clicks.insert(day: 2, total: 11)\r\ndb.clicks.insert(day: 3, total: 34)\r\n\r\ndef keyf = \"function(clicks) { return clicks.day % 2 ? { odd: true } : { even: true } }\"\r\n\r\ndef command = ['$keyf': keyf, cond: [:], initial: [count: 0], $reduce: \"function(doc, out) { out.count += doc.total }\"]\r\n\r\ndef result = db.clicks.group(command)\r\n\r\n// Will output [[odd:true, count:99.0], [even:true, count:56.0]]\r\nprintln result  \r\n```\r\n\r\n# Build\r\n\r\nThe project is build using gradle. Gradle can be found in: http://www.gradle.org\r\n\r\n# Test\r\n\r\nTo run the tests start a mongo instance on localhost:27017\r\n\r\n# Support\r\n\r\nAny bug, suggestion or ... whatever.\r\n\r\nEmail: paulogpoiati@gmail.com\r\n\r\nTwitter: http://twitter.com/poiati","tagline":"A Groovy wrapper to the mongodb Java driver","google":"UA-30879506-1","note":"Don't delete this file! It's used internally to help with page regeneration."}